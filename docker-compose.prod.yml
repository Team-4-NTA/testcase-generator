version: '3.8'

services:
  web:
    build:
      context: .
      dockerfile: config/docker/Dockerfile.prod
    container_name: django_app_prod
    command: >
      sh -c "python manage.py migrate &&
             python manage.py collectstatic --noinput &&
             gunicorn --bind 0.0.0.0:8888 testcase_generator.wsgi:application"
    volumes:
      - ./src:/app
      - ./staticfiles:/app/staticfiles
      - ./media:/app/media
    env_file:
      - .env
    ports:
      - "8888:8888"
    depends_on:
      db:
        condition: service_healthy
    environment:
      - DJANGO_SETTINGS_MODULE=testcase_generator.settings.production
    networks:
      - app-network

  db:
    image: mysql:8.0
    container_name: mysql_db_prod
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: ${DATABASE_PASSWORD}
      MYSQL_DATABASE: ${DATABASE_NAME}
      MYSQL_USER: ${DATABASE_USER}
      MYSQL_PASSWORD: ${DATABASE_PASSWORD}
    ports:
      - "3307:3306"
    volumes:
      - mysql_data_prod:/var/lib/mysql
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 5s
      timeout: 3s
      retries: 5

  nginx:
    image: nginx:alpine
    container_name: django_app_nginx_prod
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./src:/var/www/html
      - ./config/nginx/default.conf:/etc/nginx/conf.d/default.conf
      - ./certbot/www:/var/www/certbot
      - ./certbot/conf:/etc/letsencrypt
    depends_on:
      - web
    networks:
      - app-network

  redis:
    image: redis:7-alpine
    container_name: redis_prod
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - app-network

  certbot:
    image: certbot/certbot
    container_name: certbot_prod
    volumes:
      - ./certbot/www:/var/www/certbot
      - ./certbot/conf:/etc/letsencrypt
    networks:
      - app-network
    depends_on:
      - nginx
    command:
      - certonly
      - --webroot
      - --webroot-path=/var/www/certbot
      - --email=${CERTBOT_EMAIL}
      - --agree-tos
      - --no-eff-email
      - -d
      - ${DOMAIN}

  certbot-renew:
    image: certbot/certbot
    container_name: certbot_renew_prod
    volumes:
      - ./certbot/www:/var/www/certbot
      - ./certbot/conf:/etc/letsencrypt
    networks:
      - app-network
    depends_on:
      - nginx
    entrypoint: >
      sh -c "trap exit TERM; while :; do certbot renew --webroot -w /var/www/certbot --quiet --no-self-upgrade && nginx -s reload; sleep 12h; done"

volumes:
  mysql_data_prod:
  redis_data:

networks:
  app-network:
    driver: bridge
