name: CI/CD Deploy to EC2

on:
  pull_request:
    branches: [ main ]
    types: [ closed ]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

    - name: Run tests
      run: |
        if [ -f manage.py ]; then python manage.py test; fi

  build-and-deploy:
    needs: test
    runs-on: ubuntu-latest
    if: >
      github.event_name == 'pull_request' &&
      github.event.action == 'closed' &&
      github.event.pull_request.merged == true &&
      github.event.pull_request.base.ref == 'main' &&
      github.event.pull_request.head.ref == 'develop'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and push Web image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ secrets.DOCKER_USERNAME }}/django-app:latest
        cache-from: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/django-app:latest
        cache-to: type=inline

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Deploy to EC2 - Step 1 - Navigate to directory
      id: ssm-navigate
      run: |
        echo "Navigating to project directory..."
        COMMAND_ID=$(aws ssm send-command --instance-ids "${{ secrets.EC2_INSTANCE_ID }}" \
          --document-name "AWS-RunShellScript" \
          --comment "Navigate to directory" \
          --parameters "commands=[
            \"set -e\",
            \"export HOME=/home/ec2-user\",
            \"cd /home/ec2-user/testcase-generator || { echo 'CD failed'; exit 1; }\",
            \"echo 'Current dir: $(pwd)'\"
          ]" \
          --output text \
          --query 'Command.CommandId' \
          --timeout-seconds 60)

        echo "SSM command sent with ID: $COMMAND_ID"
        echo "command-id=$COMMAND_ID" >> $GITHUB_OUTPUT

        aws ssm wait command-executed \
          --command-id "$COMMAND_ID" \
          --instance-id "${{ secrets.EC2_INSTANCE_ID }}"

        STATUS=$(aws ssm get-command-invocation \
          --command-id "$COMMAND_ID" \
          --instance-id "${{ secrets.EC2_INSTANCE_ID }}" \
          --plugin-name "aws:runShellScript" \
          --query 'Status' \
          --output text)

        OUTPUT=$(aws ssm get-command-invocation \
          --command-id "$COMMAND_ID" \
          --instance-id "${{ secrets.EC2_INSTANCE_ID }}" \
          --plugin-name "aws:runShellScript" \
          --query 'StandardOutputContent' \
          --output text)

        ERROR=$(aws ssm get-command-invocation \
          --command-id "$COMMAND_ID" \
          --instance-id "${{ secrets.EC2_INSTANCE_ID }}" \
          --plugin-name "aws:runShellScript" \
          --query 'StandardErrorContent' \
          --output text)

        echo "Command Status: $STATUS"
        echo "Output:"
        echo "$OUTPUT"
        echo "Error:"
        echo "$ERROR"

        if [ "$STATUS" != "Success" ]; then
          echo "Command failed with status: $STATUS"
          exit 1
        fi

    - name: Deploy to EC2 - Step 2 - Configure Git
      id: ssm-git-config
      run: |
        echo "Configuring Git safe directory..."
        COMMAND_ID=$(aws ssm send-command --instance-ids "${{ secrets.EC2_INSTANCE_ID }}" \
          --document-name "AWS-RunShellScript" \
          --comment "Configure Git" \
          --parameters "commands=[
            \"set -e\",
            \"export HOME=/home/ec2-user\",
            \"cd /home/ec2-user/testcase-generator\",
            \"git config --global --add safe.directory /home/ec2-user/testcase-generator\",
            \"git config --system --add safe.directory /home/ec2-user/testcase-generator\"
          ]" \
          --output text \
          --query 'Command.CommandId' \
          --timeout-seconds 60)

        echo "SSM command sent with ID: $COMMAND_ID"
        echo "command-id=$COMMAND_ID" >> $GITHUB_OUTPUT

        aws ssm wait command-executed \
          --command-id "$COMMAND_ID" \
          --instance-id "${{ secrets.EC2_INSTANCE_ID }}"

        STATUS=$(aws ssm get-command-invocation \
          --command-id "$COMMAND_ID" \
          --instance-id "${{ secrets.EC2_INSTANCE_ID }}" \
          --plugin-name "aws:runShellScript" \
          --query 'Status' \
          --output text)

        OUTPUT=$(aws ssm get-command-invocation \
          --command-id "$COMMAND_ID" \
          --instance-id "${{ secrets.EC2_INSTANCE_ID }}" \
          --plugin-name "aws:runShellScript" \
          --query 'StandardOutputContent' \
          --output text)

        ERROR=$(aws ssm get-command-invocation \
          --command-id "$COMMAND_ID" \
          --instance-id "${{ secrets.EC2_INSTANCE_ID }}" \
          --plugin-name "aws:runShellScript" \
          --query 'StandardErrorContent' \
          --output text)

        echo "Command Status: $STATUS"
        echo "Output:"
        echo "$OUTPUT"
        echo "Error:"
        echo "$ERROR"

        if [ "$STATUS" != "Success" ]; then
          echo "Command failed with status: $STATUS"
          exit 1
        fi

    - name: Deploy to EC2 - Step 3 - Git fetch and checkout
      id: ssm-git-fetch
      run: |
        echo "Fetching and checking out Git repository..."
        COMMAND_ID=$(aws ssm send-command --instance-ids "${{ secrets.EC2_INSTANCE_ID }}" \
          --document-name "AWS-RunShellScript" \
          --comment "Git fetch and checkout" \
          --parameters "commands=[
            \"set -e\",
            \"export HOME=/home/ec2-user\",
            \"cd /home/ec2-user/testcase-generator\",
            \"git fetch https://x-access-token:${{ secrets.TOKEN_GITHUB }}@github.com/Team-4-NTA/testcase-generator.git || { echo 'Git fetch failed'; exit 1; }\",
            \"git checkout main 2>/dev/null || git checkout -b main origin/main\",
            \"git pull https://x-access-token:${{ secrets.TOKEN_GITHUB }}@github.com/Team-4-NTA/testcase-generator.git main || { echo 'Git pull failed'; exit 1; }\",
            \"echo 'Latest commit: $(git log -1 --oneline)'\"
          ]" \
          --output text \
          --query 'Command.CommandId' \
          --timeout-seconds 120)

        echo "SSM command sent with ID: $COMMAND_ID"
        echo "command-id=$COMMAND_ID" >> $GITHUB_OUTPUT

        aws ssm wait command-executed \
          --command-id "$COMMAND_ID" \
          --instance-id "${{ secrets.EC2_INSTANCE_ID }}"

        STATUS=$(aws ssm get-command-invocation \
          --command-id "$COMMAND_ID" \
          --instance-id "${{ secrets.EC2_INSTANCE_ID }}" \
          --plugin-name "aws:runShellScript" \
          --query 'Status' \
          --output text)

        OUTPUT=$(aws ssm get-command-invocation \
          --command-id "$COMMAND_ID" \
          --instance-id "${{ secrets.EC2_INSTANCE_ID }}" \
          --plugin-name "aws:runShellScript" \
          --query 'StandardOutputContent' \
          --output text)

        ERROR=$(aws ssm get-command-invocation \
          --command-id "$COMMAND_ID" \
          --instance-id "${{ secrets.EC2_INSTANCE_ID }}" \
          --plugin-name "aws:runShellScript" \
          --query 'StandardErrorContent' \
          --output text)

        echo "Command Status: $STATUS"
        echo "Output:"
        echo "$OUTPUT"
        echo "Error:"
        echo "$ERROR"

        if [ "$STATUS" != "Success" ]; then
          echo "Command failed with status: $STATUS"
          exit 1
        fi

    - name: Deploy to EC2 - Step 4 - Stop services
      id: ssm-stop-services
      run: |
        echo "Stopping Nginx and Docker Compose services..."
        COMMAND_ID=$(aws ssm send-command --instance-ids "${{ secrets.EC2_INSTANCE_ID }}" \
          --document-name "AWS-RunShellScript" \
          --comment "Stop services" \
          --parameters "commands=[
            \"set -e\",
            \"export HOME=/home/ec2-user\",
            \"cd /home/ec2-user/testcase-generator\",
            \"sudo systemctl stop nginx || true\",
            \"docker-compose down || true\"
          ]" \
          --output text \
          --query 'Command.CommandId' \
          --timeout-seconds 120)

        echo "SSM command sent with ID: $COMMAND_ID"
        echo "command-id=$COMMAND_ID" >> $GITHUB_OUTPUT

        aws ssm wait command-executed \
          --command-id "$COMMAND_ID" \
          --instance-id "${{ secrets.EC2_INSTANCE_ID }}"

        STATUS=$(aws ssm get-command-invocation \
          --command-id "$COMMAND_ID" \
          --instance-id "${{ secrets.EC2_INSTANCE_ID }}" \
          --plugin-name "aws:runShellScript" \
          --query 'Status' \
          --output text)

        OUTPUT=$(aws ssm get-command-invocation \
          --command-id "$COMMAND_ID" \
          --instance-id "${{ secrets.EC2_INSTANCE_ID }}" \
          --plugin-name "aws:runShellScript" \
          --query 'StandardOutputContent' \
          --output text)

        ERROR=$(aws ssm get-command-invocation \
          --command-id "$COMMAND_ID" \
          --instance-id "${{ secrets.EC2_INSTANCE_ID }}" \
          --plugin-name "aws:runShellScript" \
          --query 'StandardErrorContent' \
          --output text)

        echo "Command Status: $STATUS"
        echo "Output:"
        echo "$OUTPUT"
        echo "Error:"
        echo "$ERROR"

        if [ "$STATUS" != "Success" ]; then
          echo "Command failed with status: $STATUS"
          exit 1
        fi

    - name: Deploy to EC2 - Step 5 - Start Docker Compose
      id: ssm-start-docker
      run: |
        echo "Starting Docker Compose services..."
        COMMAND_ID=$(aws ssm send-command --instance-ids "${{ secrets.EC2_INSTANCE_ID }}" \
          --document-name "AWS-RunShellScript" \
          --comment "Start Docker Compose" \
          --parameters "commands=[
            \"set -e\",
            \"export HOME=/home/ec2-user\",
            \"cd /home/ec2-user/testcase-generator\",
            \"docker-compose up -d --build --force-recreate\"
          ]" \
          --output text \
          --query 'Command.CommandId' \
          --timeout-seconds 300)

        echo "SSM command sent with ID: $COMMAND_ID"
        echo "command-id=$COMMAND_ID" >> $GITHUB_OUTPUT

        aws ssm wait command-executed \
          --command-id "$COMMAND_ID" \
          --instance-id "${{ secrets.EC2_INSTANCE_ID }}"

        STATUS=$(aws ssm get-command-invocation \
          --command-id "$COMMAND_ID" \
          --instance-id "${{ secrets.EC2_INSTANCE_ID }}" \
          --plugin-name "aws:runShellScript" \
          --query 'Status' \
          --output text)

        OUTPUT=$(aws ssm get-command-invocation \
          --command-id "$COMMAND_ID" \
          --instance-id "${{ secrets.EC2_INSTANCE_ID }}" \
          --plugin-name "aws:runShellScript" \
          --query 'StandardOutputContent' \
          --output text)

        ERROR=$(aws ssm get-command-invocation \
          --command-id "$COMMAND_ID" \
          --instance-id "${{ secrets.EC2_INSTANCE_ID }}" \
          --plugin-name "aws:runShellScript" \
          --query 'StandardErrorContent' \
          --output text)

        echo "Command Status: $STATUS"
        echo "Output:"
        echo "$OUTPUT"
        echo "Error:"
        echo "$ERROR"

        if [ "$STATUS" != "Success" ]; then
          echo "Command failed with status: $STATUS"
          exit 1
        fi

    - name: Deploy to EC2 - Step 6 - Run migrations
      id: ssm-run-migrations
      run: |
        echo "Running Django migrations..."
        COMMAND_ID=$(aws ssm send-command --instance-ids "${{ secrets.EC2_INSTANCE_ID }}" \
          --document-name "AWS-RunShellScript" \
          --comment "Run migrations" \
          --parameters "commands=[
            \"set -e\",
            \"export HOME=/home/ec2-user\",
            \"cd /home/ec2-user/testcase-generator\",
            \"docker-compose exec web python manage.py migrate --noinput || true\"
          ]" \
          --output text \
          --query 'Command.CommandId' \
          --timeout-seconds 300)

        echo "SSM command sent with ID: $COMMAND_ID"
        echo "command-id=$COMMAND_ID" >> $GITHUB_OUTPUT

        aws ssm wait command-executed \
          --command-id "$COMMAND_ID" \
          --instance-id "${{ secrets.EC2_INSTANCE_ID }}"

        STATUS=$(aws ssm get-command-invocation \
          --command-id "$COMMAND_ID" \
          --instance-id "${{ secrets.EC2_INSTANCE_ID }}" \
          --plugin-name "aws:runShellScript" \
          --query 'Status' \
          --output text)

        OUTPUT=$(aws ssm get-command-invocation \
          --command-id "$COMMAND_ID" \
          --instance-id "${{ secrets.EC2_INSTANCE_ID }}" \
          --plugin-name "aws:runShellScript" \
          --query 'StandardOutputContent' \
          --output text)

        ERROR=$(aws ssm get-command-invocation \
          --command-id "$COMMAND_ID" \
          --instance-id "${{ secrets.EC2_INSTANCE_ID }}" \
          --plugin-name "aws:runShellScript" \
          --query 'StandardErrorContent' \
          --output text)

        echo "Command Status: $STATUS"
        echo "Output:"
        echo "$OUTPUT"
        echo "Error:"
        echo "$ERROR"

        if [ "$STATUS" != "Success" ]; then
          echo "Command failed with status: $STATUS"
          exit 1
        fi

    - name: Deploy to EC2 - Step 7 - Collect static files
      id: ssm-collect-static
      run: |
        echo "Collecting static files..."
        COMMAND_ID=$(aws ssm send-command --instance-ids "${{ secrets.EC2_INSTANCE_ID }}" \
          --document-name "AWS-RunShellScript" \
          --comment "Collect static files" \
          --parameters "commands=[
            \"set -e\",
            \"export HOME=/home/ec2-user\",
            \"cd /home/ec2-user/testcase-generator\",
            \"docker-compose exec web python manage.py collectstatic --noinput || true\"
          ]" \
          --output text \
          --query 'Command.CommandId' \
          --timeout-seconds 300)

        echo "SSM command sent with ID: $COMMAND_ID"
        echo "command-id=$COMMAND_ID" >> $GITHUB_OUTPUT

        aws ssm wait command-executed \
          --command-id "$COMMAND_ID" \
          --instance-id "${{ secrets.EC2_INSTANCE_ID }}"

        STATUS=$(aws ssm get-command-invocation \
          --command-id "$COMMAND_ID" \
          --instance-id "${{ secrets.EC2_INSTANCE_ID }}" \
          --plugin-name "aws:runShellScript" \
          --query 'Status' \
          --output text)

        OUTPUT=$(aws ssm get-command-invocation \
          --command-id "$COMMAND_ID" \
          --instance-id "${{ secrets.EC2_INSTANCE_ID }}" \
          --plugin-name "aws:runShellScript" \
          --query 'StandardOutputContent' \
          --output text)

        ERROR=$(aws ssm get-command-invocation \
          --command-id "$COMMAND_ID" \
          --instance-id "${{ secrets.EC2_INSTANCE_ID }}" \
          --plugin-name "aws:runShellScript" \
          --query 'StandardErrorContent' \
          --output text)

        echo "Command Status: $STATUS"
        echo "Output:"
        echo "$OUTPUT"
        echo "Error:"
        echo "$ERROR"

        if [ "$STATUS" != "Success" ]; then
          echo "Command failed with status: $STATUS"
          exit 1
        fi

    - name: Deploy to EC2 - Step 8 - Verify deployment
      id: ssm-verify
      run: |
        echo "Verifying deployment..."
        COMMAND_ID=$(aws ssm send-command --instance-ids "${{ secrets.EC2_INSTANCE_ID }}" \
          --document-name "AWS-RunShellScript" \
          --comment "Verify deployment" \
          --parameters "commands=[
            \"set -e\",
            \"export HOME=/home/ec2-user\",
            \"cd /home/ec2-user/testcase-generator\",
            \"docker ps -a\",
            \"docker-compose logs --tail 20 nginx\"
          ]" \
          --output text \
          --query 'Command.CommandId' \
          --timeout-seconds 60)

        echo "SSM command sent with ID: $COMMAND_ID"
        echo "command-id=$COMMAND_ID" >> $GITHUB_OUTPUT

        aws ssm wait command-executed \
          --command-id "$COMMAND_ID" \
          --instance-id "${{ secrets.EC2_INSTANCE_ID }}"

        STATUS=$(aws ssm get-command-invocation \
          --command-id "$COMMAND_ID" \
          --instance-id "${{ secrets.EC2_INSTANCE_ID }}" \
          --plugin-name "aws:runShellScript" \
          --query 'Status' \
          --output text)

        OUTPUT=$(aws ssm get-command-invocation \
          --command-id "$COMMAND_ID" \
          --instance-id "${{ secrets.EC2_INSTANCE_ID }}" \
          --plugin-name "aws:runShellScript" \
          --query 'StandardOutputContent' \
          --output text)

        ERROR=$(aws ssm get-command-invocation \
          --command-id "$COMMAND_ID" \
          --instance-id "${{ secrets.EC2_INSTANCE_ID }}" \
          --plugin-name "aws:runShellScript" \
          --query 'StandardErrorContent' \
          --output text)

        echo "Command Status: $STATUS"
        echo "Output:"
        echo "$OUTPUT"
        echo "Error:"
        echo "$ERROR"

        if [ "$STATUS" != "Success" ]; then
          echo "Command failed with status: $STATUS"
          exit 1
        fi

        echo "Deployment completed successfully."